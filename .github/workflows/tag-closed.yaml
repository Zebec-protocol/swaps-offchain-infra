name: Tag push

on:
    pull_request:
        branches:
          - deployment-test

jobs:
    build-test-release:
      #if: github.event.action == 'closed' && github.event.pull_request.merged == true
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                ref: ${{ github.event.pull_request.head.ref }}
                fetch-depth: 0

            - name: Setup NodeJS 16
              uses: actions/setup-node@v1
              with:
                  node-version: 16

            - name: Install yarn
              run: npm install -g yarn

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

            - name: Cache yarn dependencies
              uses: actions/cache@v2
              id: yarn-cache
              with:
                  path: |
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                      **\node_modules
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-
            - name: Install dependencies
              if: steps.yarn-cache.outputs.cache-hit != 'true'
              run: yarn install

            - name: Test
              run: |
                  RUN=CI yarn test
                  yarn lint
            - name: Build components
              run: |
                  yarn build
            - name: Raise version of affected libraries
              run: |
                  PACKAGES=$(yarn nx affected:apps --base=origin/master --plain | awk 'NR > 2 && $1 != "Done" { print $1 }')
                  git config user.email "admin@mycelium.ventures"
                  git config user.name ${{ github.actor }}
                  for PACKAGE in $PACKAGES
                  do
                    cd ./packages/$PACKAGE
                    LATEST_TAG=$(git tag -l "$PACKAGE:v*" --sort=-version:refname | head -n 1)
                    VERSION=$(npm version minor --no-git-tag-version --no-push)
                    echo "Bumping $PACKAGE"
                    git fetch
                    git add --all
                    git commit -m "Update $PACKAGE version to $VERSION"
                    git tag -a $PACKAGE/$VERSION -m "$PACKAGE tag release $VERSION"
                    cd ..
                    cd ..
                  done
                  npm version minor --no-git-tag-version --no-push
                  git push --follow-tags
